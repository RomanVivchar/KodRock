import re
from db import Database
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
from warnings import filterwarnings
from telegram.warnings import PTBUserWarning

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

(NAME, LAST_NAME, PHONE_NUMBER, MAIL, CONFIRMATION,
 START_ROUTES, SHOP, CREATION_ACCOUNT, END_CONV, END,
 ASK_QUESTION, VIEW_QUESTIONS, USER_QUESTION, USER_ANSWER, VIEW_ANSWERS,
 ADD_ANSWER, VIEWING_QUESTION, BUY_ITEM, BACK, ANSWER,
 QUESTION, CHANGING_ANSWER, CHANGING_QUESTION, TAGS, SEARCH,
 UPDATE_RATING, BAD_QUESTION, GOOD_QUESTION, LOGIN, PASSWORD,
 ADMIN, REQUEST, DECISION_ANSWER, DECISION_QUESTION, CONTINUE_REVIEW,
 ACCESS) = map(chr, range(36))

db = Database("project", "bot", "bot123", "194.87.239.80", "5432")

bot = Bot(token="7188985096:AAFn7ijrux_O4JAEkJQWeAk3J8V8fg_wJrk")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if db.user_exists(chat_id) is not False:
        await update.message.reply_text(text="–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ /info.")
        return ConversationHandler.END
    else:
        chat_id = update.effective_chat.id
        db.add_user(chat_id)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞–º –∞–∫–∫–∞—É–Ω—Ç! –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–í–≤–æ–¥–∏—Ç–µ –ø–æ "
            "–ø–æ—Ä—è–¥–∫—É –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é):\n\n"
            "–§–∞–º–∏–ª–∏—è: ‚ùå\n"
            "–ò–º—è: ‚ùå\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: ‚ùå\n"
            "–ü–æ—á—Ç–∞: ‚ùå\n")
    return LAST_NAME


# something
async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞–º –∞–∫–∫–∞—É–Ω—Ç! –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–í–≤–æ–¥–∏—Ç–µ –ø–æ "
        "–ø–æ—Ä—è–¥–∫—É –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é):\n\n"
        "–§–∞–º–∏–ª–∏—è: ‚ùå\n"
        "–ò–º—è: ‚ùå\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: ‚ùå\n"
        "–ü–æ—á—Ç–∞: ‚ùå\n")

    return LAST_NAME


async def last_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_name = update.message.text.capitalize()
    await update.message.reply_text(f"–§–∞–º–∏–ª–∏—è: ‚úÖ ({last_name})")
    chat_id = update.effective_chat.id
    db.set_last_name(chat_id, last_name)

    return NAME


async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    name = update.message.text.capitalize()
    await update.message.reply_text(f"–ò–º—è: ‚úÖ ({name})")
    chat_id = update.effective_chat.id
    db.set_name(chat_id, name)
    return PHONE_NUMBER


async def phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if (re.match("^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$", phone)) is None:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return PHONE_NUMBER

    await update.message.reply_text(f"–¢–µ–ª–µ—Ñ–æ–Ω: ‚úÖ ({phone})")
    chat_id = update.effective_chat.id
    db.set_phone(chat_id, phone)

    return CONFIRMATION


async def confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mail = update.message.text
    if (re.match("^([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)$", mail)) is None:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        return CONFIRMATION

    await update.message.reply_text(f"–ü–æ—á—Ç–∞: ‚úÖ ({mail})")
    chat_id = update.effective_chat.id
    db.set_email(chat_id, mail)

    keyboard = [[InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=str(END))],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å ‚ùå\n(–í–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ)",
                                      callback_data=str(CREATION_ACCOUNT))]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                                    reply_markup=reply_markup)

    return END_CONV


async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    await query.answer()

    await query.edit_message_text("C–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–ù–∞–∂–º–∏—Ç–µ /info")

    return ConversationHandler.END


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=str(ASK_QUESTION))],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data=str(VIEW_QUESTIONS))],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–≥—É", callback_data=str(SEARCH))]
    ]
    welcome_message = (f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! "
                       f"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. "
                       f"–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∏ –ø—Ä–∏ "
                       f"–∂–µ–ª–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö. ")

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    return START_ROUTES


async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await bot.send_message(chat_id=query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ üè∑ #—Ç–µ–≥")
    return TAGS


async def tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tag = update.message.text
    rows = db.search_by_tag(tag)
    if len(rows) == 0:
        await bot.send_message(update.message.chat_id, text=f"–¢–µ–≥ üè∑ {tag} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return TAGS
    else:
        for row in rows:
            question_id, text, date, user_id = row
            keyboard = [
                [InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å", callback_data=question_id)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await bot.send_message(chat_id=update.message.chat_id,
                                   text=f"‚ùî –í–æ–ø—Ä–æ—Å: {text}\n"
                                        f"üè∑ #—Ç–µ–≥: {tag}",
                                   reply_markup=reply_markup)

    return START_ROUTES


async def ask_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await bot.send_message(update.effective_user.id,
                           text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–Ω–∞–Ω–∏–µ! –ü–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞, —á–µ—Ä–µ–∑ '-' —É–∫–∞–∂–∏—Ç–µ #—Ç–µ–≥")

    return USER_QUESTION


async def user_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text.split("-")
    text = question[0].strip()
    tag = question[1].strip()
    chat_id = update.effective_chat.id
    db.add_question(chat_id, text, tag)
    await update.message.reply_text(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: 1 üíé gems!")
    db.insert_gems(chat_id, 1)
    return ConversationHandler.END


async def view_all_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    rows = db.all_questions()
    await bot.send_message(chat_id=chat_id, text=f"–í–æ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–Ω–∞–Ω–∏–µ:")
    for row in rows:
        tag, question_id, question_text, rating = row
        keyboard = [
            [InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å", callback_data=question_id)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await bot.send_message(chat_id=chat_id,
                               text=f"‚ùî –í–æ–ø—Ä–æ—Å: {question_text}\n"
                                    f"üè∑ #—Ç–µ–≥: {tag}\n"
                                    f"üìà –†–µ–π—Ç–∏–Ω–≥: {rating}",
                               reply_markup=reply_markup)

    return START_ROUTES


async def question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question"] = int(update.callback_query.data)
    await update.callback_query.answer()
    row = db.get_question(context.user_data["question"])
    tag, question_text, date, user_id, rating = row
    user_lastname, username = db.get_user(user_id)
    keyboard = [
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å", callback_data=str(ADD_ANSWER))],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã", callback_data=str(VIEW_ANSWERS))],
        [InlineKeyboardButton("–ü–ª–æ—Ö–æ–π –≤–æ–ø—Ä–æ—Å üîª", callback_data=str(BAD_QUESTION)),
         InlineKeyboardButton("–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å ‚úÖ", callback_data=str(GOOD_QUESTION))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id=update.effective_user.id,
                           text=f"‚ùî –í–æ–ø—Ä–æ—Å: {question_text}\n\n"
                                f"üè∑ #—Ç–µ–≥: {tag}\n"
                                f"üìà –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                                f"‚è∞ –í—Ä–µ–º—è: {date}\n"
                                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_lastname} {username}",
                           reply_markup=reply_markup)
    return START_ROUTES


async def set_question_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    vote = 0
    if query.data == str(BAD_QUESTION):
        vote = -2
    keyboard = [[InlineKeyboardButton(text="‚Ü©", callback_data=context.user_data["question"])]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    db.set_question_rating(context.user_data["question"], vote)
    await bot.send_message(chat_id=update.effective_user.id, text="–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!", reply_markup=reply_markup)
    return START_ROUTES


async def user_answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await bot.send_message(chat_id=update.effective_user.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

    return USER_ANSWER


async def user_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_user.id
    question_id = context.user_data["question"]
    db.add_answer(chat_id, text, question_id)
    row = db.check_strike(chat_id)
    today_answers = row[0]
    if today_answers in [3, 4, 5]:
        await update.message.reply_text(text=f"–í–∞—É! –¢—ã –º–Ω–æ–≥–æ –∑–Ω–∞–µ—à—å! –ó–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {today_answers} "
                                             f"–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–Ω–∞–Ω–∏–µ! –î–µ—Ä–∂–∏ üíé {today_answers + 2} gems!"
                                             f"\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /info")
        db.insert_gems(chat_id, today_answers + 2)
    elif today_answers in [6, 7, 8, 9]:
        await update.message.reply_text(text=f"–î–∞ —Ç—ã –∑–Ω–∞—Ç–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞! –ú–æ–ª–æ–¥–µ—Ü! –ó–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ "
                                             f"{today_answers} "
                                             f"–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–Ω–∞–Ω–∏–µ! –î–µ—Ä–∂–∏ üíé {today_answers + 3} gems!"
                                             f"\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /info")
        db.insert_gems(chat_id, today_answers + 3)
    elif today_answers >= 10:
        await update.message.reply_text(text=f"–ú–∞–≥–∏—Å—Ç—Ä –∑–Ω–∞–Ω–∏–π!!! –ö –≤–∞–º –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å –≤–æ–ø—Ä–æ—Å–æ–º! "
                                             f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {today_answers} "
                                             f"–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–Ω–∞–Ω–∏–µ! –î–µ—Ä–∂–∏ üíé {today_answers + 5} gems!"
                                             f"\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /info")
        db.insert_gems(chat_id, today_answers + 5)
    else:
        await update.message.reply_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: üíé 1 gem!"
                                             "\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /info")
        db.insert_gems(chat_id, 1)
    context.user_data.clear()

    return ConversationHandler.END


async def view_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    question_id = context.user_data["question"]
    rows = db.all_answers(question_id)
    if len(rows) == 0:
        await bot.send_message(chat_id=update.effective_user.id, text='–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤')
    for row in rows:
        answer_id, text, date, user_id = row
        user_lastname, username = db.get_user(user_id)
        await bot.send_message(chat_id=update.effective_user.id,
                               text=f"–û—Ç–≤–µ—Ç –æ—Ç: {user_lastname} {username}\n\n"
                                    f"{text}\n\n"
                                    f"‚è∞ –í—Ä–µ–º—è: {date}\n")
    keyboard = [[InlineKeyboardButton(text="‚Ü©", callback_data=question_id)]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id=update.effective_user.id, text='–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                           reply_markup=reply_markup)
    context.user_data.clear()
    return START_ROUTES


async def get_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    rows = db.all_users()
    for row in rows:
        last_name, name, phone_number, email, count_answers, count_questions = row
        await bot.send_message(chat_id=update.effective_user.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:{last_name} {name}\n\n"
                                                                      f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {count_answers}\n"
                                                                      f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–Ω–∞–Ω–∏—è: {count_questions}\n\n"
                                                                      f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                                                                      f"–ü–æ—á—Ç–∞: {email}")


async def account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    last_name, name, phone_number, email, gems = db.account(chat_id)
    await update.message.reply_text(text=f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n\n"
                                         f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
                                         f"–ò–º—è: {name}\n"
                                         f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                                         f"–ü–æ—á—Ç–∞: {email}\n"
                                         f"–ë–∞–ª–∞–Ω—Å: üíé {gems} gems")


async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    keyboard = [[InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=10),
                 InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=25),
                 InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=50),
                 InlineKeyboardButton(text="4Ô∏è‚É£", callback_data=100)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏ –∏ —Ç–¥."
                                         f"–∑–∞ üíé gems, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ —Ç–æ–≤–∞—Ä –≤–∞—à!\n\n"
                                         f"–í–∞—à –±–∞–ª–∞–Ω—Å: üíé {db.get_gems(chat_id)[0]} gems\n\n"
                                         f"–¢–æ–≤–∞—Ä—ã:\n\n"
                                         f"1Ô∏è‚É£ Item1 - 10 üíé gems\nDescription1\n\n"
                                         f"2Ô∏è‚É£ Item2 - 25 üíé gems\nDescription2\n\n"
                                         f"3Ô∏è‚É£ Item3 - 50 üíé gems\nDescription3\n\n"
                                         f"4Ô∏è‚É£ Item4 - 100 üíé gems\nDescription2",
                                    reply_markup=reply_markup)

    return BUY_ITEM


async def shop_over(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    keyboard = [[InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=10),
                 InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=25),
                 InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=50),
                 InlineKeyboardButton(text="4Ô∏è‚É£", callback_data=100)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏ –∏ —Ç–¥."
                                       f"–∑–∞ üíé gems, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ —Ç–æ–≤–∞—Ä –≤–∞—à!\n\n"
                                       f"–í–∞—à –±–∞–ª–∞–Ω—Å: üíé {db.get_gems(chat_id)[0]} gems\n\n"
                                       f"–¢–æ–≤–∞—Ä—ã:\n\n"
                                       f"1Ô∏è‚É£ Item1 - 10 üíé gems\nDescription1\n\n"
                                       f"2Ô∏è‚É£ Item2 - 25 üíé gems\nDescription2\n\n"
                                       f"3Ô∏è‚É£ Item3 - 50 üíé gems\nDescription3\n\n"
                                       f"4Ô∏è‚É£ Item4 - 100 üíé gems\nDescription2",
                                  reply_markup=reply_markup)

    return BUY_ITEM


async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # await query.answer()
    chat_id = update.effective_chat.id
    gems = db.get_gems(chat_id)[0]
    keyboard = [[InlineKeyboardButton(text="‚Ü©", callback_data=str(SHOP))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if gems <= int(query.data):
        await query.edit_message_text(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
            reply_markup=reply_markup)
        return BACK
    else:
        db.insert_gems(chat_id, -int(query.data))
        await bot.send_message(chat_id=update.effective_user.id, text=f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n"
                                                                      f"–í–∞—à –±–∞–ª–∞–Ω—Å: {db.get_gems(chat_id)[0]} üíé gems")

    return ConversationHandler.END


async def get_my_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    rows = db.my_answers(chat_id)
    for row in rows:
        answer_id, text_answer, answer_date, question_id = row
        tag, text_question, question_date, asker_id, rating = db.get_question(question_id)
        asker_last_name, asker_name = db.get_user(asker_id)
        keyboard = [[InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=answer_id)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await bot.send_message(chat_id=chat_id, text=f"–í–æ–ø—Ä–æ—Å:\n{text_question}\n–û—Ç: {asker_last_name} {asker_name}\n"
                                                     f"–î–∞—Ç–∞: {question_date}\n\n–í–∞—à –æ—Ç–≤–µ—Ç: {text_answer}\n"
                                                     f"–î–∞—Ç–∞: {answer_date}", reply_markup=reply_markup)

    return CHANGING_ANSWER


async def change_my_answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["answer_id"] = int(update.callback_query.data)
    chat_id = update.effective_chat.id
    await bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç")
    return ANSWER


async def change_my_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer_id = context.user_data["answer_id"]
    db.update_answer(text, answer_id)
    await update.message.reply_text(text="–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    context.user_data.clear()
    return CHANGING_ANSWER


async def get_my_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    rows = db.my_questions(chat_id)
    for row in rows:
        question_id, text, date = row
        keyboard = [[InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=question_id)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await bot.send_message(chat_id=chat_id, text=f"–í–æ–ø—Ä–æ—Å:\n{text}\n"
                                                     f"–î–∞—Ç–∞: {date}\n",
                               reply_markup=reply_markup)

    return CHANGING_QUESTION


async def change_my_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_id"] = int(update.callback_query.data)
    chat_id = update.effective_chat.id
    await bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
    return QUESTION


async def change_my_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    question_id = context.user_data["question_id"]
    db.update_question(text, question_id)
    await update.message.reply_text(text="–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    context.user_data.clear()
    return ConversationHandler.END


async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    keyboard = [[InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data=str(ADMIN))]]
    await bot.send_message(chat_id, text="–†–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=InlineKeyboardMarkup(keyboard))
    return LOGIN


async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    if db.check_admin(chat_id) is False:
        await bot.send_message(chat_id, "–í—ã –Ω–µ admin")
        return ConversationHandler.END
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
    return PASSWORD


async def password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['username'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    return ACCESS


async def access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    admin = True
    chat_id = update.effective_user.id
    if update.message is not None:
        password = update.message.text
        username = context.user_data.get('username')
        admin = db.check_entry_admin(chat_id, username, password)
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data=str(VIEW_QUESTIONS)),
                 InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã", callback_data=str(VIEW_ANSWERS))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if not admin:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /admin")
        return ADMIN
    await bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! "
                                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–Ω–∞–Ω–∏—è", reply_markup=reply_markup)
    return REQUEST


async def review_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    if query.data == str(VIEW_QUESTIONS):
        rows = db.all_questions(state=False, decline=True)
        if len(rows) == 0:
            keyboard = [
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–ù–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–Ω–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=reply_markup)
            return ACCESS
        for row in rows:
            tag, question_id, question_text, rating = row
            db.set_true_question(question_id, True)
            await bot.send_message(chat_id=chat_id,
                                   text=f"‚ùî –í–æ–ø—Ä–æ—Å: {question_text}\n"
                                        f"üè∑ #—Ç–µ–≥: {tag}\n"
                                        f"üìà –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                                        f"QUESTION_ID: {question_id}")

        await bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é id –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—è—Ç—å, "
                                                     "–æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –ï—Å–ª–∏ –≤—Å–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ 0")
        return DECISION_QUESTION
    else:
        rows = db.all_questions(state=True, decline=False)
        count_ans = False
        for row in rows:
            tag, question_id, question_text, rating = row
            answers = db.all_answers(question_id=question_id, state=False, decline=True)
            if len(answers) == 0:
                continue
            count_ans = True
            await bot.send_message(chat_id=chat_id,
                                   text=f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
            await bot.send_message(chat_id=chat_id,
                                   text=f"‚ùî –í–æ–ø—Ä–æ—Å: {question_text}\n\n–û—Ç–≤–µ—Ç—ã:")
            for answer in answers:
                answer_id, text, date, user_id = answer
                db.set_true_answer(answer_id, True)
                await bot.send_message(chat_id=chat_id, text=f"{text}\nANSWER_ID: {answer_id}")
        if count_ans:
            await bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é id –æ—Ç–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—è—Ç—å, "
                                                         "–æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –ï—Å–ª–∏ –≤—Å–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, "
                                                         "–Ω–∞–ø–∏—à–∏—Ç–µ 0")
            return DECISION_ANSWER
        else:
            keyboard = [
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–ù–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=reply_markup)
            return ACCESS


async def decision_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    accepted_questions = update.message.text.split(',')
    chat_id = update.effective_chat.id
    for accepted_question in accepted_questions:
        db.set_true_question(int(accepted_question))

    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id=chat_id, text="–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.", reply_markup=reply_markup)

    return CONTINUE_REVIEW


async def decision_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    accepted_answers = update.message.text.split(',')
    chat_id = update.effective_chat.id
    for accepted_answer in accepted_answers:
        print(accepted_answer)
        db.set_true_answer(int(accepted_answer))

    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id=chat_id, text="–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.", reply_markup=reply_markup)

    return CONTINUE_REVIEW


async def handle_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    decision = update.callback_query.data
    if decision == 'accept':
        await update.callback_query.message.reply_text("new idea has been sent to all users.")
    elif decision == 'decline':
        user_id = update.callback_query.message.chat_id
        await context.bot.send_message(chat_id=user_id, text="your idea request has been declined.")

    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(text="1) –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ª—É—á—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
                                         "(–í–æ–ø—Ä–æ—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤.)\n\n"

                                         "2) –í —á–∞—Ç-–±–æ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å "
                                         "—Ç–µ–º–∞—Ç–∏–∫—É –≤–æ–ø—Ä–æ—Å–∞.\n\n"

                                         "3) –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–≥–∞–º.\n\n"

                                         "4) –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ "
                                         "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.\n\n"

                                         "5) –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–≤–æ–∏–º –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ "
                                         "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.\n\n"

                                         "6) –í —á–∞—Ç-–±–æ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–∏—Ö "
                                         "–≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"

                                         "7) –í —á–∞—Ç-–±–æ—Ç–µ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª, –≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –æ—Å—Ç–∞–≤–∏–≤—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã "
                                         "–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã, –≤ –ø–æ—Ä—è–¥–∫–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤."
                                         "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ "
                                         "—ç—Ç–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
                                         "8) –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")


def main() -> None:
    app = ApplicationBuilder().token("7188985096:AAFn7ijrux_O4JAEkJQWeAk3J8V8fg_wJrk").build()

    user_registration = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, name
                )
            ],
            LAST_NAME: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, last_name
                )
            ],
            PHONE_NUMBER: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, phone_number
                )
            ],
            CONFIRMATION: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, confirmation
                )
            ],
            END_CONV: [
                CallbackQueryHandler(end_conversation, pattern="^" + str(END) + "$")
            ],
        },
        fallbacks=[CallbackQueryHandler(start_over, pattern="^" + str(CREATION_ACCOUNT) + "$")]
    )

    welcome_message = ConversationHandler(
        entry_points=[CommandHandler("info", info)],
        states={
            START_ROUTES: [
                CallbackQueryHandler(ask_question_handler, pattern="^" + str(ASK_QUESTION) + "$"),
                CallbackQueryHandler(view_all_questions, pattern="^" + str(VIEW_QUESTIONS) + "$"),
                CallbackQueryHandler(question, pattern="^-?\d+(\.\d+)?$"),
                CallbackQueryHandler(view_answers, pattern="^" + str(VIEW_ANSWERS) + "$"),
                CallbackQueryHandler(user_answer_handler, pattern="^" + str(ADD_ANSWER) + "$"),
                CallbackQueryHandler(search, pattern="^" + str(SEARCH) + "$"),
                CallbackQueryHandler(set_question_rating, pattern="^" + str(BAD_QUESTION) + "$"),
                CallbackQueryHandler(set_question_rating, pattern="^" + str(GOOD_QUESTION) + "$")
            ],
            USER_QUESTION: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, user_question
                )
            ],
            USER_ANSWER: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, user_answer
                )
            ],
            TAGS: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, tags
                )
            ],
            UPDATE_RATING: [
                CallbackQueryHandler(question, pattern="^-?\d+(\.\d+)?$")
            ]
        },
        fallbacks=[CallbackQueryHandler(question, pattern="^-?\d+(\.\d+)?$")]
    )

    buy_item = ConversationHandler(
        entry_points=[CommandHandler("shop", shop)],
        states={
            BUY_ITEM: [
                CallbackQueryHandler(buy, pattern="^-?\d+(\.\d+)?$")
            ],
            BACK: [
                CallbackQueryHandler(shop_over, pattern="^" + str(SHOP) + "$")
            ],
        },
        fallbacks=[]
    )

    changing_answer = ConversationHandler(
        entry_points=[CommandHandler("myanswers", get_my_answers),
                      CommandHandler("myquestions", get_my_questions)],
        states={
            CHANGING_ANSWER: [
                CallbackQueryHandler(change_my_answer_handler, pattern="^-?\d+(\.\d+)?$")
            ],
            CHANGING_QUESTION: [
                CallbackQueryHandler(change_my_question_handler, pattern="^-?\d+(\.\d+)?$")
            ],
            ANSWER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, change_my_answer)
            ],
            QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, change_my_question)
            ]
        },
        fallbacks=[CommandHandler("myanswers", get_my_answers),
                   CommandHandler("myquestions", get_my_questions)]
    )

    admin_panel = ConversationHandler(
        entry_points=[CommandHandler("admin", admin)],
        states={
            LOGIN: [CallbackQueryHandler(login, pattern="^" + str(ADMIN) + "$")],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password)],
            ACCESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, access),
                     CallbackQueryHandler(access, pattern="^" + "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" + "$")],
            REQUEST: [CallbackQueryHandler(review_request, pattern="^" + str(VIEW_QUESTIONS) + "$"),
                      CallbackQueryHandler(review_request, pattern="^" + str(VIEW_ANSWERS) + "$")],
            DECISION_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, decision_answers)],
            DECISION_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, decision_questions)],
            CONTINUE_REVIEW: [CallbackQueryHandler(access, pattern="^" + "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" + "$")]
        },
        fallbacks=[CommandHandler("admin", admin)]
    )

    app.add_handler(admin_panel)
    app.add_handler(user_registration)
    app.add_handler(welcome_message)
    app.add_handler(buy_item)
    app.add_handler(changing_answer)
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("account", account))
    app.add_handler(CommandHandler("users", get_all_users))
    app.add_handler(CommandHandler("info", info))
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
